import com.github.jrubygradle.JRubyExec

plugins {
    id "com.jfrog.bintray" version "1.7"
    id "com.github.jruby-gradle.base" version "0.1.5"
    id "com.jfrog.artifactory" version "4.4.0" // Install artifactory plugin
    id "java"
    id "maven" // install jar files to the local repo: $ gradle install
    id "maven-publish"
    id "checkstyle"
    id "findbugs"
    id "jacoco"
}

// This will disable building the jar for root, which we don't need
jar.enabled = false

allprojects {
    group = 'org.embulk.input.github'
    version = "0.1.0"
}

subprojects {
    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'com.github.jruby-gradle.base'

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    configurations {
        provided
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://dl.bintray.com/embulk-base-restclient/maven"
        }
    }


    dependencies {
        compile  "org.embulk:embulk-core:0.8.38"
        provided "org.embulk:embulk-core:0.8.38"
        compile  "org.embulk.base.restclient:embulk-base-restclient:0.5.3"
        compile  "org.embulk.base.restclient:embulk-util-retryhelper-jetty92:0.5.3"
        testCompile "junit:junit:4.+"
        testCompile "org.embulk:embulk-core:0.8.38:tests"
        testCompile "org.embulk:embulk-test:0.8.38"
        testCompile "org.mockito:mockito-core:2.+"
    }


    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    javadoc {
        options {
            locale = 'en_US'
            encoding = 'UTF-8'
        }
    }

    test {
        jvmArgs '-XX:MaxPermSize=128M', '-Xmx2048m'
        // Set the timezone for testing somewhere other than my machine to increase the chances of catching timezone bugs
        systemProperty 'user.timezone', 'PST'
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    task classpath(type: Copy, dependsOn: ["jar"]) {
        doFirst { file("classpath").deleteDir() }
        from(configurations.runtime - configurations.provided + files(jar.archivePath))
        into "classpath"
    }

    checkstyle {
        configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
        toolVersion = '6.14.1'
    }
    checkstyleMain {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    checkstyleTest {
        configFile = file("${project.rootDir}/config/checkstyle/default.xml")
        ignoreFailures = true
    }
    task checkstyle(type: Checkstyle) {
        classpath = sourceSets.main.output + sourceSets.test.output
        source = sourceSets.main.allJava + sourceSets.test.allJava
    }

    task gem(type: JRubyExec, dependsOn: ["gemspec", "classpath"]) {
        jrubyArgs "-rrubygems/gem_runner", "-eGem::GemRunner.new.run(ARGV)", "build"
        script "${project.projectDir.absolutePath}/${project.name}.gemspec"
        doLast { ant.move(file: "${project.name}-${project.version}.gem", todir: "${parent.projectDir}/pkg") }
    }

    task "package" (dependsOn: ["gemspec", "classpath"]) {
        doLast {
            println "> Build succeeded."
            println "> You can run embulk with '-L ${file(".").absolutePath}' argument."
        }
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.setEnabled(false)
            csv.setEnabled(false)
            html.destination file("${buildDir}/reports/coverage")
        }
    }
    clean { delete "${project.projectDir.absolutePath}/${project.name}.gemspec" }
}
